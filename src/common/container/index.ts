import { Container } from "inversify";
import Types from "@/common/container/types";
import { IUserRepository } from "@/modules/user/repositories/IUserRepository";
import { UserRepository } from "@/modules/user/repositories/UserRepository";
import { UserController } from "@/modules/user/http/controller/userController";
import { CreateUserService } from "@/modules/user/services/createUserService";
import { UpdateUserService } from "@/modules/user/services/updateUserService";
import AuthController from "@/modules/auth/infra/http/controllers/AuthController";
import { ListUserService } from "@/modules/user/services/listUserService";
import { RevenueRepository } from "@/modules/revenue/repositories/RevenueRepository";
import { RevenueController } from "@/modules/revenue/infra/http/controller/RevenueController";
import { CreateRevenueService } from "@/modules/revenue/services/createRevenueService";
import { ListRevenueService } from "@/modules/revenue/services/ListRevenueService";
import { FixedExpenseRepository } from "@/modules/fixedExpense/repositories/FixedExpenseRepositorie";
import { FixedExpenseController } from "@/modules/fixedExpense/infra/controller/fixedExpenseController";
import { VariableExpenseRepository } from "@/modules/variableExpense/repositorie/variableExpenseRepository";
import { VariableExpenseController } from "@/modules/variableExpense/infra/http/controller/variableExpenseController";
import { FinanceController } from "@/modules/finance/infra/controllers/FincanceController";
import { FinanceRepository } from "@/modules/finance/repositories/FinanceRepository";

const container = new Container();

container.bind<UserController>(Types.UserController).to(UserController);
container.bind<IUserRepository>(Types.UserRepository).to(UserRepository);
container.bind<CreateUserService>(Types.CreateUserService).to(CreateUserService);
container.bind<UpdateUserService>(Types.UpdateUserService).to(UpdateUserService);
container.bind(Types.AuthController).toConstantValue(new AuthController());
container.bind<ListUserService>(Types.ListUserService).to(ListUserService);
container.bind<RevenueRepository>(Types.RevenueRepository).to(RevenueRepository);
container.bind<RevenueController>(Types.RevenueController).to(RevenueController);
container.bind<CreateRevenueService>(Types.CreateRevenueService).to(CreateRevenueService);
container.bind<ListRevenueService>(Types.ListRevenueService).to(ListRevenueService);
container.bind<FixedExpenseRepository>(Types.FixedExpenseRepository).to(FixedExpenseRepository);
container.bind<FixedExpenseController>(Types.FixedExpenseController).to(FixedExpenseController);
container.bind<VariableExpenseRepository>(Types.VariableExpenseRepository).to(VariableExpenseRepository);
container.bind<VariableExpenseController>(Types.VariableExpenseController).to(VariableExpenseController);
container.bind<FinanceController>(Types.FinanceController).to(FinanceController);
container.bind<FinanceRepository>(Types.FinanceRepository).to(FinanceRepository);
export default container;
